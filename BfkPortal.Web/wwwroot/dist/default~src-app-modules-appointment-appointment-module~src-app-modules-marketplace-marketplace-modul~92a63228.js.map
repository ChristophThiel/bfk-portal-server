{"version":3,"sources":["webpack:///./node_modules/ngx-pagination/dist/ngx-pagination.js","webpack:///./src/app/shared/list/list.component.html","webpack:///./src/app/shared/list/list.component.scss","webpack:///./src/app/shared/list/list.component.ts","webpack:///./src/app/shared/search/search.component.html","webpack:///./src/app/shared/search/search.component.scss","webpack:///./src/app/shared/search/search.component.ts","webpack:///./src/app/shared/shared.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiK;AAClH;;AAE/C;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,SAAS,OAAO,kDAAI;AACpB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C;AAC/C,SAAS,2BAA2B;AACpC,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,yvBAAyvB,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,mGAAmG,kBAAkB,KAAK,mBAAmB,6XAA6X,yBAAyB,kCAAkC,cAAc,6IAA6I,4BAA4B,kCAAkC,cAAc,wVAAwV,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AAC/0E,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE,iCAAiC,kBAAkB,EAAE,wCAAwC,8CAA8C,4BAA4B,EAAE,uGAAuG,oBAAoB,EAAE,GAAG;;AAEn2D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,iBAAiB,IAAI;AACrB;AACA;AACA,8DAA8D,WAAW;AACzE;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,4BAA4B,OAAO,mDAAK,EAAE;AAC1C,sBAAsB,OAAO,mDAAK,EAAE;AACpC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,yCAAyC,OAAO,mDAAK,EAAE;AACvD,mCAAmC,OAAO,mDAAK,EAAE;AACjD,sCAAsC,OAAO,mDAAK,EAAE;AACpD,wBAAwB,OAAO,oDAAM,EAAE;AACvC;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AAC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","file":"default~src-app-modules-appointment-appointment-module~src-app-modules-marketplace-marketplace-modul~92a63228.js","sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        }\r\n        else {\r\n            var changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (args instanceof Array) {\r\n            // compatible with angular2 before beta16\r\n            args = args[0];\r\n        }\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId;\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, args) {\r\n        var config = args;\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe.decorators = [\r\n        { type: Pipe, args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginatePipe.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n    ]; };\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ page.label }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ page.label }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\r\n        get: function () {\r\n            return this._responsive;\r\n        },\r\n        set: function (value) {\r\n            this._responsive = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PaginationControlsComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsComponent.ctorParameters = function () { return []; };\r\n    PaginationControlsComponent.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'directionLinks': [{ type: Input },],\r\n        'autoHide': [{ type: Input },],\r\n        'responsive': [{ type: Input },],\r\n        'previousLabel': [{ type: Input },],\r\n        'nextLabel': [{ type: Input },],\r\n        'screenReaderPaginationLabel': [{ type: Input },],\r\n        'screenReaderPageLabel': [{ type: Input },],\r\n        'screenReaderCurrentLabel': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsComponent;\r\n}());\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.getTotalItems = function () {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.setCurrent(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    PaginationControlsDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsDirective.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n        { type: ChangeDetectorRef, },\r\n    ]; };\r\n    PaginationControlsDirective.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsDirective;\r\n}());\n\nvar NgxPaginationModule = (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgxPaginationModule.ctorParameters = function () { return []; };\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n","module.exports = \"<div>\\r\\n      <div *ngFor=\\\"let appointmentArr of partedAppointments | paginate: this.config\\\" class=\\\"p-3\\\">\\r\\n          <h2 class=\\\"h2-responsive\\\"><b>{{appointmentArr[0].fromDateTime |date:'EEEE, dd.M.yyyy': '' : 'de-AT'}}</b></h2>\\r\\n                <div *ngFor=\\\"let appointment of appointmentArr;let index=index\\\"  [attr.id]=\\\"appointment.id\\\" #target>\\r\\n                    <div>\\r\\n                      <div>\\r\\n                          <div class=\\\"\\\">\\r\\n                              <div class=\\\" z-depth-1 mb-1  list-group-item list-color rounded-left rounded-right\\\">\\r\\n                                <div (click)=\\\"selectedAppointment(appointment)\\\" class=\\\"\\\">\\r\\n                                  <div style=\\\"height:100%; width: 100%\\\" class=\\\"row  justify-content-between\\\">\\r\\n                                    <h5 class=\\\"col-md-6 col-sm-12 txtOverflow\\\">\\r\\n                                      <b>{{appointment.title }}\\r\\n                                      </b>\\r\\n                                    </h5>\\r\\n                                    <p class=\\\" mb-0 col-md-6 col-sm-12 txtOverflow\\\">{{appointment.from |date:'HH:mm': '' : 'de-AT'}} - {{appointment.to |date:'HH:mm': '' : 'de-AT'}} \\r\\n                                        <span *ngIf=\\\"appointment.moreDays && checkWidth()\\\">\\r\\n                                            (bis\\r\\n                                            {{appointment.to |date:'dd.M.yyyy': '' : 'de-AT'  }})\\r\\n                                        </span>\\r\\n                                    </p>\\r\\n                                    <p class=\\\"col-12\\\" *ngIf=\\\"appointment.moreDays && !checkWidth()\\\">\\r\\n                                        (bis\\r\\n                                        {{appointment.to |date:'dd.M.yyyy': '' : 'de-AT'  }})\\r\\n                                    </p>\\r\\n                                  </div>\\r\\n                      \\r\\n                      \\r\\n                                </div>\\r\\n                                <div [ngStyle]=\\\"{'background-color': checkColor(appointment)}\\\" class=\\\"col-12 color-height\\\">\\r\\n                                </div>\\r\\n                              </div>\\r\\n                            </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n              \\r\\n              \\r\\n                  </div>\\r\\n\\r\\n        \\r\\n      </div>\\r\\n\\r\\n  \\r\\n</div>\\r\\n<pagination-template  #pT=\\\"paginationApi\\\"\\r\\n                     [id]=\\\"config.id\\\"\\r\\n                     (pageChange)=\\\"config.currentPage = $event\\\">\\r\\n\\r\\n\\r\\n    <div class=\\\"custom-pagination mt-5\\\">\\r\\n        <div class=\\\"pagination-previous\\\" [class.disabled]=\\\"pT.isFirstPage()\\\">\\r\\n            <a *ngIf=\\\"!pT.isFirstPage()\\\" (click)=\\\"pT.previous()\\\"> < </a>\\r\\n        </div>\\r\\n\\r\\n        <div *ngFor=\\\"let page of pT.pages\\\" [class.current]=\\\"pT.getCurrent() === page.value\\\">\\r\\n            <a (click)=\\\"pT.setCurrent(page.value)\\\" *ngIf=\\\"pT.getCurrent() !== page.value\\\">\\r\\n                <span>{{ page.label }}</span>\\r\\n            </a>\\r\\n            <div *ngIf=\\\"pT.getCurrent() === page.value\\\">\\r\\n                <span>{{ page.label }}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"pagination-next\\\" [class.disabled]=\\\"pT.isLastPage()\\\">\\r\\n            <a *ngIf=\\\"!pT.isLastPage()\\\" (click)=\\\"pT.next()\\\"> > </a>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</pagination-template>\\r\\n\"","module.exports = \".border-round {\\n  border-radius: 2em !important; }\\n\\n.list-color {\\n  background-color: white !important; }\\n\\n.fa-external-link {\\n  font: normal normal normal 20px/1 FontAwesome;\\n  text-align: center; }\\n\\n.mar {\\n  margin-bottom: 0 !important; }\\n\\n.txtOverflow {\\n  overflow: hidden;\\n  text-overflow: ellipsis; }\\n\\n.color-height {\\n  height: 1vh; }\\n\\n.set-flex {\\n  flex: 1; }\\n\\n.custom-pagination {\\n  display: flex;\\n  max-width: 300px;\\n  margin: auto; }\\n\\n.custom-pagination > div {\\n  flex: 1;\\n  font-size: 18px;\\n  text-align: center;\\n  border-bottom: 3px solid transparent;\\n  -moz-user-select: none;\\n  -webkit-user-select: none;\\n  -ms-user-select: none; }\\n\\n.custom-pagination > div {\\n  flex: 1;\\n  font-size: 18px;\\n  text-align: center;\\n  border-bottom: 3px solid transparent;\\n  -moz-user-select: none;\\n  -webkit-user-select: none;\\n  -ms-user-select: none; }\\n\\n.custom-pagination > div.current {\\n  border-color: #e9241d; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2xpc3QvQzpcXFVzZXJzXFxjaHJpc1xcU291cmNlIENvZGVcXEdpdEh1YlxcYmZrLXBvcnRhbFxcYmZrLXBvcnRhbC1jbGllbnQvc3JjXFxhcHBcXHNoYXJlZFxcbGlzdFxcbGlzdC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc2hhcmVkL2xpc3QvQzpcXFVzZXJzXFxjaHJpc1xcU291cmNlIENvZGVcXEdpdEh1YlxcYmZrLXBvcnRhbFxcYmZrLXBvcnRhbC1jbGllbnQvc3JjXFx2YXJpYWJsZXMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNFLDhCQUE2QixFQUM5Qjs7QUFDRDtFQUNFLG1DQUE2QyxFQUM5Qzs7QUFDRDtFQUNFLDhDQUE2QztFQUM3QyxtQkFBa0IsRUFDbkI7O0FBRUQ7RUFDRSw0QkFBMkIsRUFDNUI7O0FBQ0Q7RUFDRSxpQkFBZ0I7RUFDaEIsd0JBQXVCLEVBQ3hCOztBQUVEO0VBQ0UsWUFBVyxFQUNaOztBQUNEO0VBQ0UsUUFBTyxFQUNSOztBQUNEO0VBQ0UsY0FBYTtFQUNiLGlCQUFnQjtFQUNoQixhQUFZLEVBQ2I7O0FBQ0Q7RUFDRSxRQUFPO0VBQ1AsZ0JBQWU7RUFDZixtQkFBa0I7RUFDbEIscUNBQW9DO0VBQ3BDLHVCQUFzQjtFQUN0QiwwQkFBeUI7RUFDekIsc0JBQXFCLEVBQ3RCOztBQUNEO0VBQ0UsUUFBTztFQUNQLGdCQUFlO0VBQ2YsbUJBQWtCO0VBQ2xCLHFDQUFvQztFQUNwQyx1QkFBc0I7RUFDdEIsMEJBQXlCO0VBQ3pCLHNCQUFxQixFQUN0Qjs7QUFDRDtFQUNFLHNCQ25EcUIsRURvRHRCIiwiZmlsZSI6InNyYy9hcHAvc2hhcmVkL2xpc3QvbGlzdC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCJzcmMvdmFyaWFibGVzLnNjc3NcIjtcclxuXHJcbi5ib3JkZXItcm91bmQge1xyXG4gIGJvcmRlci1yYWRpdXM6IDJlbSAhaW1wb3J0YW50O1xyXG59XHJcbi5saXN0LWNvbG9yIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5X2NvbG9yICFpbXBvcnRhbnQ7XHJcbn1cclxuLmZhLWV4dGVybmFsLWxpbmsge1xyXG4gIGZvbnQ6IG5vcm1hbCBub3JtYWwgbm9ybWFsIDIwcHgvMSBGb250QXdlc29tZTtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5tYXIge1xyXG4gIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcclxufVxyXG4udHh0T3ZlcmZsb3cge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbn1cclxuXHJcbi5jb2xvci1oZWlnaHQge1xyXG4gIGhlaWdodDogMXZoO1xyXG59XHJcbi5zZXQtZmxleHtcclxuICBmbGV4OiAxO1xyXG59XHJcbi5jdXN0b20tcGFnaW5hdGlvbiB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gIG1hcmdpbjogYXV0bztcclxufVxyXG4uY3VzdG9tLXBhZ2luYXRpb24+ZGl2IHtcclxuICBmbGV4OiAxO1xyXG4gIGZvbnQtc2l6ZTogMThweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcclxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XHJcbn1cclxuLmN1c3RvbS1wYWdpbmF0aW9uPmRpdiB7XHJcbiAgZmxleDogMTtcclxuICBmb250LXNpemU6IDE4cHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xyXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xyXG59XHJcbi5jdXN0b20tcGFnaW5hdGlvbj5kaXYuY3VycmVudCB7XHJcbiAgYm9yZGVyLWNvbG9yOiAkcHJpbWFyeV9jb2xvcjtcclxufVxyXG5cclxuIiwiJHByaW1hcnlfY29sb3I6ICNlOTI0MWQ7XHJcbiRzZWNvbmRhcnlfY29sb3I6ICB3aGl0ZTtcclxuJGZvcm1fY29udHJvbF9mb2N1czogI2Q3Y2NjODtcclxuJGFjY2VudF9jb2xvcl93aGl0ZTogd2hpdGU7XHJcbiRhY2NlbnRfY29sb3JfYmxhY2s6IGJsYWNrO1xyXG4kY29tcGxldGVkX2NvbG9yOiMwMEM4NTE7Il19 */\"","import { Component, Input, SimpleChanges, OnChanges, ChangeDetectorRef} from '@angular/core';\r\nimport * as _ from 'lodash';\r\nimport {Router} from '@angular/router';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { Appointment } from '../models/appointment';\r\nimport { AppointmentService } from 'src/app/core/services/appointment-service/appointment.service';\r\n\r\n@Component({selector: 'app-list',\r\n templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss']})\r\nexport class ListComponent implements\r\nOnChanges {\r\n  @Input()partedAppointments: Array < Appointment[] >;\r\n  @Input()appointmentId: number;\r\n  public config: PaginationInstance = {\r\n    id: 'advanced',\r\n    itemsPerPage: 5,\r\n    currentPage: 1,\r\n};\r\n  onChangesubscription: any;\r\n  public detailsModal;\r\n  checkColor = Appointment.checkColor;\r\n  searchStr = '';\r\n  clickedAppointment: Appointment;\r\n  // tslint:disable-next-line:max-line-length\r\n  constructor(private appointmentService: AppointmentService, private router: Router, private changeDetector: ChangeDetectorRef) {\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.partedAppointments = [];\r\n    if (changes['partedAppointments'].currentValue != null) {\r\n      this.partedAppointments = changes['partedAppointments'].currentValue;\r\n      if (this.appointmentId != null && this.partedAppointments.length !== 0) {\r\n        this.partedAppointments.map((appointments, ind) => {\r\n          appointments.forEach(appointment => {\r\n            if (appointment.id === this.appointmentId) {\r\n              if ((ind + 1) % this.config.itemsPerPage === 0) {\r\n                this.config.currentPage = Math.floor((ind + 1) / this.config.itemsPerPage);\r\n              } else {\r\n                this.config.currentPage = Math.floor((ind + 1) / this.config.itemsPerPage) + 1;\r\n              }\r\n            }\r\n          });\r\n        });\r\n        this.changeDetector.detectChanges();\r\n        this.scrollToAppointment();\r\n      }\r\n    }\r\n    if (!!changes['appointmentId']) {\r\n      this.appointmentId = changes['appointmentId'].currentValue;\r\n    }\r\n  }\r\n\r\n  getSearchString(e): void {\r\n    this.searchStr = e;\r\n  }\r\n  pageChanged(event) {\r\n    this.config.currentPage = event;\r\n  }\r\n  scrollToAppointment(): void {\r\n    const appRef = document.getElementById(this.appointmentId.toString());\r\n    if (appRef != null) {\r\n      appRef.scrollIntoView({behavior: 'smooth', block: 'center'});\r\n    }\r\n  }\r\n  search(appointment: Appointment): boolean {\r\n    if (this.searchStr === '') {\r\n      return true;\r\n    }\r\n    if (appointment.title.toUpperCase().includes(this.searchStr.toUpperCase())) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  selectedAppointment(appointment: Appointment) {\r\n    this\r\n      .router\r\n      .navigate(['home/appointments/details/', appointment.id]);\r\n  }\r\n  checkWidth(): boolean {\r\n    return window.innerWidth >= 500\r\n      ? true\r\n      : false;\r\n  }\r\n\r\n}\r\n","module.exports = \"<form style=\\\"width:100%;\\\" class=\\\"form-inline md-form form-sm justify-content-center\\\">\\r\\n    <i class=\\\"fa fa-search\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    <input (input)=\\\"onSearchChange($event.target.value)\\\" class=\\\"form-control form-control-sm ml-3 w-75 flex-center\\\" type=\\\"text\\\" placeholder=\\\"Search\\\" aria-label=\\\"Search\\\" mdbInputDirective>\\r\\n  </form>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9zZWFyY2gvc2VhcmNoLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.scss']\r\n})\r\nexport class SearchComponent implements OnInit {\r\n  @Output() getSearchString = new EventEmitter<string>();\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  onSearchChange(searchValue: string) {\r\n    this.getSearchString.emit(searchValue);\r\n  }\r\n}\r\n","import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MDBSpinningPreloader, InputsModule, WavesModule, ButtonsModule } from 'ng-uikit-pro-standard';\r\nimport { ListComponent } from './list/list.component';\r\nimport { SearchComponent } from './search/search.component';\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ListComponent,\r\n    SearchComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    InputsModule,\r\n    WavesModule,\r\n    ButtonsModule,\r\n    NgxPaginationModule,\r\n  ],\r\n  exports: [\r\n    ListComponent,\r\n    SearchComponent,\r\n  ],\r\n  schemas: [NO_ERRORS_SCHEMA],\r\n  providers: [MDBSpinningPreloader]\r\n})\r\nexport class SharedModule { }\r\n\r\n"],"sourceRoot":""}